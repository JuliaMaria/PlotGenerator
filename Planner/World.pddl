(define (domain World)
	(:requirements :strips :typing)
	(:types character location item enemy bigenemy)
	(:predicates
		(at ?p1 - character ?p2 - location)
		(has ?p1 - character ?p2 - item)
		(safe ?p1 - location)
		(cured ?p1 - character)
		(fed ?p1 - character)
		(healthy ?p1 - character)
		(infected ?p1 - character)
	)
	(:action go
		:parameters(?c - character ?l1 - location ?l2 - location )
		:precondition( and (at ?c ?l1) (alive ?c) (hero ?c) (open ?l1) (path ?l1 ?l2)	)
		:effect( and (at ?c ?l2) (not (at ?c ?l1)))
	)
	(:action get
		:parameters(?c - character ?i - item ?l - location )
		:precondition( and (at ?c ?l) (alive ?c) (hero ?c) (at ?i ?l) (safe ?l)	)
		:effect( and (has ?c ?i) (not (at ?i ?l)))
	)
	(:action ask
		:parameters(?c1 - character ?c2 - character ?i - item ?l - location )
		:precondition( and (at ?c1 ?l) (alive ?c1) (hero ?c1) (healthy ?c2) (at ?c2 ?l) (has ?c2 ?i)	)
		:effect( and (knowneed ?c2 ?c1 ?i))
	)
	(:action give
		:parameters(?c1 - character ?c2 - character ?i - item ?l - location )
		:precondition( and (at ?c1 ?l) (alive ?c1) (hero ?c1) (healthy ?c2) (at ?c2 ?l) (has ?c2 ?i) (knowneed ?c2 ?c1 ?i)	)
		:effect( and (has ?c2 ?i) (not (has ?c1 ?i)))
	)
	(:action fixbridge
		:parameters(?c - character ?i1 - item ?i2 - item ?l - location )
		:precondition( and (at ?c ?l) (alive ?c) (hero ?c) (isbridge ?l) (istool ?i1) (iswood ?i2) (has ?c ?i1) (has ?c ?i2)	)
		:effect( and (open ?l) (not (has ?c ?i2)))
	)
	(:action opendoor
		:parameters(?c - character ?i - item ?l - location )
		:precondition( and (at ?c ?l) (alive ?c) (hero ?c) (iskey ?i ?l) (has ?c ?i)	)
		:effect( and (open ?l) (not (has ?c ?i)))
	)
	(:action attack
		:parameters(?e - enemy ?c - character ?l - location )
		:precondition( and (at ?c ?l) (alive ?c) (healthy ?c)	)
		:effect( and (infected ?c) (not (healthy ?c)))
	)
	(:action cure
		:parameters(?c1 - character ?c2 - character ?i - item ?l - location )
		:precondition( and (at ?c1 ?l) (alive ?c1) (hero ?c1) (at ?c2 ?l) (alive ?c2) (infected ?c2) (has ?c1 ?i) (isantidote ?i) (!= ?c1 ?c2)	)
		:effect( and (cured ?c2) (healthy ?c2) (not (infected ?c2)) (not (has ?c1 ?i)))
	)
	(:action starve
		:parameters(?c - character ?l - location )
		:precondition( and (at ?c ?l) (alive ?c) (healthy ?c)	)
		:effect( and (starving ?c) (not (healthy ?c)))
	)
	(:action feed
		:parameters(?c1 - character ?c2 - character ?i - item ?l - location )
		:precondition( and (at ?c1 ?l) (alive ?c1) (hero ?c1) (at ?c2 ?l) (alive ?c2) (starving ?c2) (has ?c1 ?i) (isfood ?i) (!= ?c1 ?c2)	)
		:effect( and (fed ?c2) (healthy ?c2) (not (starving ?c2)) (not (has ?c1 ?i)))
	)
	(:action kill
		:parameters(?c - character ?e - bigenemy ?l - location )
		:precondition( and (at ?c ?l) (alive ?c) (hero ?c)	)
		:effect( and (safe ?l))
	)
)